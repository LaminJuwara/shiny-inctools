require(inctools)
help("inctools-package")
?incpower
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
return(list(RequiredN = round(N), plot = plot))
ss_baseline_cohort <- function(Inc, Prev, FracIncRed, Power = 0.8, alpha = 0.05,
MDRI, RSE_MDRI, FRR, RSE_FRR,
CR = 1, DE_H = 1, DE_R = 1, DE_C = 1,
BigT = 730, CohortCR = 1, FUT = 1, produce_plot = TRUE) {
N <- tryCatch({
stats::uniroot(powerdif, Inc = Inc, Prev = Prev, CR = CR, MDRI = MDRI, RSE_MDRI = RSE_MDRI,
FRR = FRR, RSE_FRR = RSE_FRR, BigT = BigT, DE_H = DE_H, DE_R = DE_R,
FracIncRed = FracIncRed, FUT = FUT, CohortCR = CohortCR, alpha = alpha,
Power = Power, DE_C = DE_C, interval = c(1,1000000))$root
},
error = function(err) {
print("Desired power level cannot be achieved!")
return(NA)
})
if(produce_plot) {
data <- do_table_data_ss_bl_cohort(Inc = Inc, Prev = Prev, FracIncRed = FracIncRed,
Power = Power, alpha = alpha,
MDRI = MDRI, RSE_MDRI = RSE_MDRI, FRR = FRR, RSE_FRR = RSE_FRR,
CR = CR, DE_H = DE_H, DE_R = DE_R, DE_C = DE_C,
BigT = BigT, CohortCR = CohortCR, FUT = FUT)
plot <- do_power_plot(data, N = N, Power = Power)
} else {plot <- NULL}
return(list(RequiredN = round(N), plot = plot))
}
#' @param rec_test_coverage_2 recent test coverage 2
#'
ss_calc_case1 <- function(TIME = 730, MDRI = 200,
mdrihatcov = 0.05, frrhat = 0.01, frrhatcov = 0.20,
inc_1 = 0.05, inc_2 = 0.03, p_pos_1 = 0.20, p_pos_2 = 0.15,
power = 0.8,
DE_prev_1 = 1, DE_prev_2 = 1, DE_RgivenTested_1 = 1, DE_RgivenTested_2 = 1,
rec_test_coverage_1 = 1, rec_test_coverage_2 = 1,
alpha = 0.05) {
#checks consistency of inputs
if(MDRI <= 0) stop("MDRI should be positive")
if(MDRI > TIME) {warning("MDRI cannot be > TIME")
return(NA)}
if(inc_2 > inc_1) {warning("inc_2 cannot be > inc_1")
return(NA)}
if(any(mdrihatcov > 1, mdrihatcov < 0)) stop("check mdrihatcov range")
if(any(frrhatcov > 1, frrhatcov < 0)) stop("check frrhatcov range")
if(any(frrhat > 1, frrhat < 0)) stop("frrhat value must be between 0 and 1")
if(any(inc_1 > 1, inc_1 < 0)) stop ("inc_1 value must be between 0 and 1")
if(any(inc_2 > 1, inc_2 < 0)) stop ("inc_2 value must be between 0 and 1")
if(any(p_pos_1 > 1, p_pos_1 < 0)) stop ("p_pos_1 value must be between 0 and 1")
if(any(p_pos_2 > 1, p_pos_2 < 0)) stop ("p_pos_2 value must be between 0 and 1")
if(any(rec_test_coverage_1 > 1, rec_test_coverage_1 < 0)) stop ("rec_test_coverage_1 value must be between 0 and 1")
if(any(rec_test_coverage_2 > 1, rec_test_coverage_2 < 0)) stop ("rec_test_coverage_2 value must be between 0 and 1")
TIME_CONV <- 365.25
mdrihat <- MDRI/TIME_CONV
TIME <- TIME/TIME_CONV
p_s_1 <- 1 - p_pos_1
p_s_2 <-1 - p_pos_2
max_frr <- 0.1
min_frr <- 0
max_mdri <- 1
min_mdri <- 0.2460
min_n_r <- 10
max_cov <- 0.25
max_alpha <- 0.10
min_prob <- 0.70
p_r_1 <- inc_1*(1 - p_pos_1)*(mdrihat - frrhat*TIME) + frrhat*p_pos_1
p_r_2 <- inc_2*(1 - p_pos_2)*(mdrihat - frrhat*TIME) + frrhat*p_pos_2
p_RgivenTested_1 <- p_r_1/p_pos_1
p_RgivenTested_2 <- p_r_2/p_pos_2
rse_squared_1 <- data.frame()
rse_squared_2 <- data.frame()
rse_difference <- 1/(-qnorm(alpha/2) - qnorm(1 - power))
rse_squared_finitesamplesize_1 <- (1/p_pos_1)*(DE_prev_1/p_s_1 + (DE_RgivenTested_1/rec_test_coverage_1)*p_RgivenTested_1*(1 - p_RgivenTested_1)/((p_RgivenTested_1 - frrhat)^2))
rse_squared_finitesamplesize_2 <- (1/p_pos_2)*(DE_prev_2/p_s_2 + (DE_RgivenTested_2/rec_test_coverage_2)*p_RgivenTested_2*(1 - p_RgivenTested_2)/((p_RgivenTested_2 - frrhat)^2))
rse_squared_mdri_1 <- (mdrihatcov*mdrihat/(mdrihat - frrhat*TIME))^2
rse_squared_mdri_2 <- (mdrihatcov*mdrihat/(mdrihat - frrhat*TIME))^2
rse_squared_frr_1 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_1*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_1 - frrhat)))^2
rse_squared_frr_2 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_2*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_2 - frrhat)))^2
lambda_1 <- ((inc_1^2)*rse_squared_finitesamplesize_1 + (inc_2^2)*rse_squared_finitesamplesize_2)
rse_squared_1 <- c(rse_squared_finitesamplesize_1, rse_squared_mdri_1, rse_squared_frr_1)
rse_squared_2 <- c(rse_squared_finitesamplesize_2, rse_squared_mdri_2, rse_squared_frr_2)
cov2_1 <- sum(rse_squared_1)
cov2_2 <- sum(rse_squared_2)
#Estimated difference
inc_diff <- inc_1 - inc_2
variance_mdri <- ((mdrihatcov*mdrihat)/(mdrihat - frrhat*TIME))^2*(inc_diff^2)
variance_frr <- ((frrhat*frrhatcov)^2/((mdrihat - frrhat*TIME)^4)*(p_pos_2*(mdrihat - p_RgivenTested_2*TIME)/p_s_2 - p_pos_1*(mdrihat - p_RgivenTested_1*TIME)/p_s_1)^2)
min_var_diff <- variance_mdri + variance_frr
min_rse <- sqrt(min_var_diff)/inc_diff
max_power <- 1 - pnorm(-qnorm(alpha/2), 1/min_rse, 1)
lambda_2 <- variance_mdri + variance_frr
denominator <- (inc_diff^2)*(rse_difference^2) - lambda_2
sample_size <- lambda_1 / denominator
p_nr_1 <- 1 - p_s_1 - p_r_1
p_nr_2 <- 1 - p_s_2 - p_r_2
if(any(p_r_1 < 0, p_r_2 < 0, p_nr_1 < 0, p_nr_2 < 0)) {
warning("Incompatible inputs produce negative population proportions")
return(NA)}
ceiling(sample_size)
}
runApp('~/Desktop/shiny-inctools/sample_size_baseline_and_cohort')
runApp()
shiny::runApp()
runApp()
?mdply
?incpower
incpower( MDRI = 200, FRR = 0.01, BigT = 730, RSE_FRR = 0.02,
RSE_MDRI = 0.05,DE_H = c(1,1), DE_R = c(1,1),
PrevH1 =  0.20, PrevH2 =  0.15, Power = 0.8, alpha = 0.05,
CR = c(1,1), BMest = 'same.test', SS = 'out' )
incpower( MDRI = 200, FRR = 0.01, BigT = 730, RSE_FRR = 0.02,
RSE_MDRI = 0.05,DE_H = c(1,1), DE_R = c(1,1), I1 = 0.05, I2 = 0.03,
PrevH1 =  0.20, PrevH2 =  0.15, Power = 0.8, alpha = 0.05,
CR = c(1,1), BMest = 'same.test', SS = 'out' )
temp_ss<-incpower( MDRI = 200, FRR = 0.01, BigT = 730, RSE_FRR = 0.2,
RSE_MDRI = 0.05,DE_H = c(1,1), DE_R = c(1,1), I1 = 0.05, I2 = 0.03,
PrevH1 =  0.20, PrevH2 =  0.15, Power = 0.8, alpha = 0.05,
CR = c(1,1), BMest = 'same.test', SS = 'out' )
temp_ss
temp_ss$Inc.Difference.Statistics
temp_ss$Inc.Difference.Statistics
ss_calc_case1 <- function(TIME = 730, MDRI = 200,
mdrihatcov = 0.05, frrhat = 0.01, frrhatcov = 0.20,
inc_1 = 0.05, inc_2 = 0.03, p_pos_1 = 0.20, p_pos_2 = 0.15,
power = 0.8,
DE_prev_1 = 1, DE_prev_2 = 1, DE_RgivenTested_1 = 1, DE_RgivenTested_2 = 1,
rec_test_coverage_1 = 1, rec_test_coverage_2 = 1,
alpha = 0.05) {
# temp_ss<-incpower( MDRI = 200, FRR = 0.01, BigT = 730, RSE_FRR = 0.2,
#                   RSE_MDRI = 0.05,DE_H = c(1,1), DE_R = c(1,1), I1 = 0.05, I2 = 0.03,
#                   PrevH1 =  0.20, PrevH2 =  0.15, Power = 0.8, alpha = 0.05,
#                   CR = c(1,1), BMest = 'same.test', SS = 'out' )
# temp_ss$Implied.Subject.Counts
#checks consistency of inputs
if(MDRI <= 0) stop("MDRI should be positive")
if(MDRI > TIME) {warning("MDRI cannot be > TIME")
return(NA)}
if(inc_2 > inc_1) {warning("inc_2 cannot be > inc_1")
return(NA)}
if(any(mdrihatcov > 1, mdrihatcov < 0)) stop("check mdrihatcov range")
if(any(frrhatcov > 1, frrhatcov < 0)) stop("check frrhatcov range")
if(any(frrhat > 1, frrhat < 0)) stop("frrhat value must be between 0 and 1")
if(any(inc_1 > 1, inc_1 < 0)) stop ("inc_1 value must be between 0 and 1")
if(any(inc_2 > 1, inc_2 < 0)) stop ("inc_2 value must be between 0 and 1")
if(any(p_pos_1 > 1, p_pos_1 < 0)) stop ("p_pos_1 value must be between 0 and 1")
if(any(p_pos_2 > 1, p_pos_2 < 0)) stop ("p_pos_2 value must be between 0 and 1")
if(any(rec_test_coverage_1 > 1, rec_test_coverage_1 < 0)) stop ("rec_test_coverage_1 value must be between 0 and 1")
if(any(rec_test_coverage_2 > 1, rec_test_coverage_2 < 0)) stop ("rec_test_coverage_2 value must be between 0 and 1")
TIME_CONV <- 365.25
mdrihat <- MDRI/TIME_CONV
TIME <- TIME/TIME_CONV
p_s_1 <- 1 - p_pos_1
p_s_2 <-1 - p_pos_2
max_frr <- 0.1
min_frr <- 0
max_mdri <- 1
min_mdri <- 0.2460
min_n_r <- 10
max_cov <- 0.25
max_alpha <- 0.10
min_prob <- 0.70
p_r_1 <- inc_1*(1 - p_pos_1)*(mdrihat - frrhat*TIME) + frrhat*p_pos_1
p_r_2 <- inc_2*(1 - p_pos_2)*(mdrihat - frrhat*TIME) + frrhat*p_pos_2
p_RgivenTested_1 <- p_r_1/p_pos_1
p_RgivenTested_2 <- p_r_2/p_pos_2
rse_squared_1 <- data.frame()
rse_squared_2 <- data.frame()
rse_difference <- 1/(-qnorm(alpha/2) - qnorm(1 - power))
rse_squared_finitesamplesize_1 <- (1/p_pos_1)*(DE_prev_1/p_s_1 + (DE_RgivenTested_1/rec_test_coverage_1)*p_RgivenTested_1*(1 - p_RgivenTested_1)/((p_RgivenTested_1 - frrhat)^2))
rse_squared_finitesamplesize_2 <- (1/p_pos_2)*(DE_prev_2/p_s_2 + (DE_RgivenTested_2/rec_test_coverage_2)*p_RgivenTested_2*(1 - p_RgivenTested_2)/((p_RgivenTested_2 - frrhat)^2))
rse_squared_mdri_1 <- (mdrihatcov*mdrihat/(mdrihat - frrhat*TIME))^2
rse_squared_mdri_2 <- (mdrihatcov*mdrihat/(mdrihat - frrhat*TIME))^2
rse_squared_frr_1 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_1*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_1 - frrhat)))^2
rse_squared_frr_2 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_2*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_2 - frrhat)))^2
lambda_1 <- ((inc_1^2)*rse_squared_finitesamplesize_1 + (inc_2^2)*rse_squared_finitesamplesize_2)
rse_squared_1 <- c(rse_squared_finitesamplesize_1, rse_squared_mdri_1, rse_squared_frr_1)
rse_squared_2 <- c(rse_squared_finitesamplesize_2, rse_squared_mdri_2, rse_squared_frr_2)
cov2_1 <- sum(rse_squared_1)
cov2_2 <- sum(rse_squared_2)
#Estimated difference
inc_diff <- inc_1 - inc_2
variance_mdri <- ((mdrihatcov*mdrihat)/(mdrihat - frrhat*TIME))^2*(inc_diff^2)
variance_frr <- ((frrhat*frrhatcov)^2/((mdrihat - frrhat*TIME)^4)*(p_pos_2*(mdrihat - p_RgivenTested_2*TIME)/p_s_2 - p_pos_1*(mdrihat - p_RgivenTested_1*TIME)/p_s_1)^2)
min_var_diff <- variance_mdri + variance_frr
min_rse <- sqrt(min_var_diff)/inc_diff
max_power <- 1 - pnorm(-qnorm(alpha/2), 1/min_rse, 1)
lambda_2 <- variance_mdri + variance_frr
denominator <- (inc_diff^2)*(rse_difference^2) - lambda_2
sample_size <- lambda_1 / denominator
p_nr_1 <- 1 - p_s_1 - p_r_1
p_nr_2 <- 1 - p_s_2 - p_r_2
if(any(p_r_1 < 0, p_r_2 < 0, p_nr_1 < 0, p_nr_2 < 0)) {
warning("Incompatible inputs produce negative population proportions")
return(NA)}
ceiling(sample_size)
}
ss_calc_case1()
temp_ss<-incpower( MDRI = 200, FRR = 0.01, BigT = 730, RSE_FRR = 0.2,
RSE_MDRI = 0.05,DE_H = c(1,1), DE_R = c(1,1), I1 = 0.05, I2 = 0.03,
PrevH1 =  0.20, PrevH2 =  0.15, Power = 0.8, alpha = 0.05,
CR = c(1,1), BMest = 'same.test', SS = 'out' )
temp_ss$Implied.Subject.Counts
temp_ss$Implied.Subject.Counts[1:2,1]
sum(temp_ss$Implied.Subject.Counts[1:2,1])
temp_ss<-incpower( MDRI = MDRI, FRR = frrhat, BigT = TIME, RSE_FRR = frrhatcov,
RSE_MDRI = mdrihatcov, DE_H = c(DE_prev_1,DE_prev_2),
DE_R = c(DE_RgivenTested_1,DE_RgivenTested_2), I1 = 0.05, I2 = 0.03,
PrevH1 =  p_pos_1, PrevH2 =  p_pos_2, Power = power, alpha = alpha,
CR = c(rec_test_coverage_1,rec_test_coverage_2),
BMest = 'MDRI.FRR.indep', SS = 'out' )
temp_ss_value<-sum(temp_ss$Implied.Subject.Counts[1:2,1])
temp_ss_value
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_2surveys')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_2surveys')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_2surveys')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_2surveys')
runApp('~/Desktop/shiny-inctools/recoding_samples/sample_size_calculator_2surveys')
shiny::runApp('~/Desktop/Link to recoding_samples/sample_size_calculator')
shiny::runApp('~/Desktop/Link to recoding_samples/sample_size_calculator')
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator')
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator_1survey')
