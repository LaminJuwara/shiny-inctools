N_testR = N_testR, N_R = N_R,
DE_H = DE_H, DE_R = DE_R,
Boot = TRUE,
BMest = 'same.test',
MDRI = MDRI, RSE_MDRI = RSE_MDRI, FRR = FRR, RSE_FRR = RSE_FRR,
BigT = BigT)
return(temp$Annual.Risk.of.Infection)
}
risk_of_infection_calc()
?df
?mdply
prevalence_calc(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
BMest = 'same.test',
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700)
prevalence_calc(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700)
prevalence_calc(N = input$N, N_H = input$N_H,
N_testR = input$N_testR, N_R = input$N_R,
DE_H = input$DE_H, DE_R = input$DE_R)
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
?inccounts
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
temp2
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
risk_of_infection_calc <- function(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
BMest = 'same.test',
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700){
temp<-inccounts(N = N, N_H = N_H,
N_testR = N_testR, N_R = N_R,
DE_H = DE_H, DE_R = DE_R,
Boot = TRUE,
BMest = 'same.test',
MDRI = MDRI, RSE_MDRI = RSE_MDRI, FRR = FRR, RSE_FRR = RSE_FRR,
BigT = BigT)
return(temp$Annual.Risk.of.Infection)
}
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
temp2
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
??PrevR
temp3<-inccounts(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
BMest = 'same.test',
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700)
temp3$Incidence.Statistics
temp3$Annual.Risk.of.Infection
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
?downloadHandler()
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
?data.frame
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
temp10<-incpower(I1 = 0.05, I2 = 0.03, PrevH1 = 0.20, PrevH2 = 0.20,
n1 = 5000, n2 = 5000, alpha = 0.05, Power = "out", SS = NULL,
DE_H = c(1,1.1), DE_R = 1, BMest = 'same.test', MDRI = 200,
RSE_MDRI = 0.05, FRR = 0.01, RSE_FRR = 0.20, BigT = 730)
temp10$Inc.Difference.Statistics
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator')
inc_diff <- function(MDRI = 200, TIME = 730, frrhat = 0.01,
mdrihatcov = 0.05, frrhatcov = 0.2,
n_s_1 = 4000, n_s_2 = 4100,
n_t_1 = 1000, n_t_2 = 950,
n_pos_1 = 1000, n_pos_2 = 950,
n_r_1 = 70, n_r_2 = 45,
DE_prev_1 = 1, DE_RgivenTested_1 = 1,
DE_prev_2 = 1, DE_RgivenTested_2 = 1) {
mdrihat <- MDRI/365.25
TIME <- TIME /365.25
n_1 <- n_s_1 + n_pos_1
n_2 <- n_s_2 + n_pos_2
#HIV-negative (proportion)
p_s_1 <- n_s_1/n_1
p_s_2 <- n_s_2/n_2
# temp_inc_diff<- incprops(PrevH = c(0.20,0.21), RSE_PrevH = c(0.028,0.03),
#                          PrevR = c(0.10,0.13), RSE_PrevR = c(0.094,0.095),
#                          BS_Count = 10000, Boot = FALSE,
#                          MDRI = 200, RSE_MDRI = 0.05,
#                          FRR = 0.01, RSE_FRR = 0.2, BigT = 730)
# temp_inc_diff$Incidence.Difference.Statistics[1,c("Diff","RSE.Diff")]
mdrihat <- MDRI/365.25
TIME <- TIME /365.25
n_1 <- n_s_1 + n_pos_1
n_2 <- n_s_2 + n_pos_2
#HIV-negative (proportion)
p_s_1 <- n_s_1/n_1
p_s_2 <- n_s_2/n_2
#HIV-positive and "recent"
p_r_1 <- n_r_1/n_1
p_r_2 <- n_r_2/n_2
#HIV-positive and "not recent"
j52 <- (n_t_1 - n_r_1)/n_1
k52 <- (n_t_2 - n_r_2)/n_2
#HIV-positive and not tested for recency
j53 <- (n_pos_1 - n_t_1)/n_1
k53 <- (n_pos_2 - n_t_2)/n_2
#HIV positive
p_pos_1 <- n_pos_1/n_1
p_pos_2 <- n_pos_2/n_2
p_pool <- (p_pos_1*n_1 + p_pos_2*n_2)/(n_1 + n_2)
#HIV-'recent'|(HIV-postive and tested for recency)
p_RgivenTested_1 <- n_r_1/n_t_1
p_RgivenTested_2 <- n_r_2/n_t_2
#prevalence standard error
prev_se_1 <- sqrt(p_pos_1*(1 - p_pos_1)/n_1)
prev_se_2 <- sqrt(p_pos_2*(1 - p_pos_2)/n_2)
inc_num_1 <- p_pos_1*(p_RgivenTested_1 - frrhat)
inc_num_2 <- p_pos_2*(p_RgivenTested_2 - frrhat)
inc_den_1 <- p_s_1*(mdrihat - TIME*frrhat)
inc_den_2 <- p_s_2*(mdrihat - TIME*frrhat)
j63 <- inc_num_1/inc_den_1
k63 <- inc_num_2/inc_den_2
#Components of incidence estimator RSE
j65 <- DE_prev_1/(n_1*p_pos_1*(1 - p_pos_1)) + (DE_RgivenTested_1*p_RgivenTested_1*(1 - p_RgivenTested_1))/(n_t_1*(p_RgivenTested_1 - frrhat)^2)
k65 <- DE_prev_2/(n_2*p_pos_2*(1 - p_pos_2)) + (DE_RgivenTested_2*p_RgivenTested_2*(1 - p_RgivenTested_2))/(n_t_2*(p_RgivenTested_2 - frrhat)^2)
j66 <- (mdrihatcov*mdrihat/(mdrihat - frrhat*TIME))^2
k66 <- j66
j67 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_1*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_1 - frrhat)))^2
k67 <- (frrhatcov*frrhat*(mdrihat - p_RgivenTested_2*TIME)/((mdrihat - frrhat*TIME)*(p_RgivenTested_2 - frrhat)))^2
cov2_1 <- j65 + j66 + j67
cov2_2 <- k65 + k66 + k67
u_inc1 <- p_pos_1*(p_RgivenTested_1 - frrhat)/(p_s_1*(mdrihat - frrhat*TIME))
u_inc2 <- p_pos_2*(p_RgivenTested_2 - frrhat)/(p_s_2*(mdrihat - frrhat*TIME))
#Components of difference estimator RSE
n65 <- (u_inc1^2*j65 + u_inc2^2*k65)
n66 <- (((mdrihatcov*mdrihat)/(mdrihat - frrhat*TIME))^2)*(u_inc1 - u_inc2)^2
n67 <- (((frrhatcov*frrhat)^2)/(mdrihat - frrhat*TIME)^4)*(((p_pos_1*(mdrihat - p_RgivenTested_1*TIME)/p_s_1)-(p_pos_2*(mdrihat - p_RgivenTested_2*TIME)/p_s_2))^2)
#Incidence difference
inc_diff <- u_inc1 - u_inc2
#Incidence difference covariance
inc_diff_cov <- sqrt((n65 + n66 + n67))/abs(inc_diff)
return(data.frame(inc_diff, inc_diff_cov))
}
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator_1survey')
runApp('~/Desktop/Link to recoding_samples/sample_size_calculator_2surveys')
incidence_calc <- function(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
BMest = 'same.test',
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700){
temp<-inccounts(N = c(N), N_H = N_H,
N_testR = N_testR, N_R = N_R,
DE_H = DE_H, DE_R = DE_R,
Boot = TRUE,
BMest = 'same.test',
MDRI = MDRI, RSE_MDRI = RSE_MDRI, FRR = FRR, RSE_FRR = RSE_FRR,
BigT = BigT)
return(temp$Incidence.Statistics)
}
incidence_calc()
require(inctools)
incidence_calc <- function(N = 5000, N_H = 1000,
N_testR = 1000, N_R = 50,
DE_H = 1, DE_R = 1,
Boot = TRUE,
BMest = 'same.test',
MDRI = 210, RSE_MDRI = 0.05, FRR = 0.005, RSE_FRR = 0.19,
BigT = 700){
temp<-inccounts(N = c(N), N_H = N_H,
N_testR = N_testR, N_R = N_R,
DE_H = DE_H, DE_R = DE_R,
Boot = TRUE,
BMest = 'same.test',
MDRI = MDRI, RSE_MDRI = RSE_MDRI, FRR = FRR, RSE_FRR = RSE_FRR,
BigT = BigT)
return(temp$Incidence.Statistics)
}
incidence_calc()
incidence_calc(N_R = 50)
incidence_calc(N_R = 100)
incidence_calc(N_R = 50)
incidence_calc(N_R = 100)
c(incidence_calc(N_R = 100),incidence_calc(N_R = 50))
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
c(incidence_calc(N_R = 100)[4],incidence_calc(N_R = 50)[4])
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
incdiff_calc <- function(case = 1, I1 = 0.05, I2 = 0.03, PrevH1 = 0.20, PrevH2 = 0.20,
alpha = 0.05,
Power = 0.8, DE_H_1 = 1, DE_H_2 = 1.1,
DE_R_1 = 1, DE_R_2 = 1 ,
MDRI = 200, RSE_MDRI = 0.05, FRR = 0.01, RSE_FRR = 0.20,
FRR_1 = 0.01, RSE_FRR_1 = 0.20,
FRR_2 = 0.01, RSE_FRR_2 = 0.30,
MDRI_1 = 200, MDRI_2 = 200,
RSE_MDRI_1 = 0.05, RSE_MDRI_2 = 0.05,
CR_1 = 1, CR_2 = 1, BigT = 730) {
#checks if case is correctly specified
if(!sum(case == c(1, 2, 3))) {stop("Please enter a valid case value")}
#manual dispatching according to case, passing arguments to the appropriate function
if (1 == case) { #Case I: Assumes that the two surveys use a single MDRI and FRRs estimate.
temp <- incpower( MDRI = MDRI, FRR = FRR, BigT = BigT, RSE_FRR = RSE_FRR,
RSE_MDRI = RSE_MDRI, DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'same.test', SS = "out" )
incdiff<-temp$Inc.Difference.Statistics
}
if (2 == case) { #Case II: Assumes that the two surveys use a single MDRI estimate, but that the FRRs are independently estimated
temp <- incpower( MDRI = MDRI, FRR = c(FRR_1,FRR_2), BigT = BigT,
RSE_FRR = c(RSE_FRR_1,RSE_FRR_2),
RSE_MDRI = RSE_MDRI, DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'FRR.indep', SS = "out" )
incdiff <- temp$Inc.Difference.Statistics
}
if(3 == case) { #Case III: Assumes that the two surveys use MDRI estimates which arise from different incidence tests, and that the FRRs are independently estimated
temp <-incpower( MDRI = c(MDRI_1,MDRI_2), FRR = c(FRR_1,FRR_2), BigT = BigT,
RSE_FRR = c(RSE_FRR_1, RSE_FRR_2),
RSE_MDRI = c(RSE_MDRI_1, RSE_MDRI_2),
DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'MDRI.FRR.indep', SS = "out" )
incdiff <- temp$Inc.Difference.Statistics
}
return(incdiff)
}
incdiff_calc <- function(case = 1, I1 = 0.05, I2 = 0.03, PrevH1 = 0.20, PrevH2 = 0.20,
alpha = 0.05,
Power = 0.8, DE_H_1 = 1, DE_H_2 = 1.1,
DE_R_1 = 1, DE_R_2 = 1 ,
MDRI = 200, RSE_MDRI = 0.05, FRR = 0.01, RSE_FRR = 0.20,
FRR_1 = 0.01, RSE_FRR_1 = 0.20,
FRR_2 = 0.01, RSE_FRR_2 = 0.30,
MDRI_1 = 200, MDRI_2 = 200,
RSE_MDRI_1 = 0.05, RSE_MDRI_2 = 0.05,
CR_1 = 1, CR_2 = 1, BigT = 730) {
#checks if case is correctly specified
if(!sum(case == c(1, 2, 3))) {stop("Please enter a valid case value")}
#manual dispatching according to case, passing arguments to the appropriate function
if (1 == case) { #Case I: Assumes that the two surveys use a single MDRI and FRRs estimate.
temp <- incpower( MDRI = MDRI, FRR = FRR, BigT = BigT, RSE_FRR = RSE_FRR,
RSE_MDRI = RSE_MDRI, DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'same.test', SS = "out" )
incdiff<-temp$Inc.Difference.Statistics
}
if (2 == case) { #Case II: Assumes that the two surveys use a single MDRI estimate, but that the FRRs are independently estimated
temp <- incpower( MDRI = MDRI, FRR = c(FRR_1,FRR_2), BigT = BigT,
RSE_FRR = c(RSE_FRR_1,RSE_FRR_2),
RSE_MDRI = RSE_MDRI, DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'FRR.indep', SS = "out" )
incdiff <- temp$Inc.Difference.Statistics
}
if(3 == case) { #Case III: Assumes that the two surveys use MDRI estimates which arise from different incidence tests, and that the FRRs are independently estimated
temp <-incpower( MDRI = c(MDRI_1,MDRI_2), FRR = c(FRR_1,FRR_2), BigT = BigT,
RSE_FRR = c(RSE_FRR_1, RSE_FRR_2),
RSE_MDRI = c(RSE_MDRI_1, RSE_MDRI_2),
DE_H = c(DE_H_1,DE_H_2),
DE_R = c(DE_R_1,DE_R_2), I1 = I1, I2 = I2,
PrevH1 =  PrevH1, PrevH2 =  PrevH2, Power = Power, alpha = alpha,
CR = c(CR_1,CR_2),
BMest = 'MDRI.FRR.indep', SS = "out" )
incdiff <- temp$Inc.Difference.Statistics
}
return(incdiff)
}
incdiff_calc(case = 3)
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_difference_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_precision')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/sample_size_for_power')
shiny::runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
runApp('~/Desktop/Link to recoding_samples/Sample_Size_Calculator_lamin/Incidence_prevalence_calculator')
?iris
data<-iris
head(data)
dim(iris)
str(iris3)
## kmeans by machine learning. Lets see how this proceeds
shiny::runApp()
runApp()
runApp()
temp<-data_incidence_count()
data_prevalence <- reactive({ # for prevalence calculation
validate(
need(input$N>0,"Please enter a valid total population sample size"),
need(input$N>=input$N_H,"HIV-positive subjects should be less than total sample size"),
need(input$N_H>=input$N_testR,"HIV-positive subjects tested for recency should be less than HIV-positive subjects among total sample size"),
need(input$N_testR>=input$N_R,"The number of recent HIV cases should be less than HIV-positive subjects tested for recency"),
need(input$RSE_FRR >= 0, 'Please provide a valid RSE for FRR'),
need(input$RSE_FRR <= 100, 'Please provide a valid RSE for FRR'),
need(!(input$RSE_FRR == "" ), 'Please provide a value for RSE_FRR'),
need(input$RSE_MDRI >= 0, 'Please provide a valid RSE for MDRI'),
need(input$RSE_MDRI <= 100, 'Please provide a valid RSE for MDRI'),
need(!(input$RSE_MDRI == "" ), 'Please provide a value for RSE_MDRI'),
need(input$MDRI >= 0, 'Please provide a valid value for MDRI'),
need(input$FRR >= 0, 'Please provide a valid value for FRR'),
need(input$FRR <= 100, 'Please provide a valid value for FRR'),
need(input$BigT, 'Please provide a value for the cut-off time'),
need(input$BigT > 120, 'Please provide a valid value for the cut-off time (>120)')
)
temp <- prevalence_calc(N = input$N, N_H = input$N_H,
N_testR = input$N_testR, N_R = input$N_R,
DE_H = input$DE_H, DE_R = input$DE_R)
return(temp)
})
data_incidence <- reactive({ # for incidence calculiation
validate(
need(input$N>0,"Please enter a valid total population sample size"),
need(input$N>=input$N_H,"HIV-positive subjects should be less than total sample size"),
need(input$N_H>=input$N_testR,"HIV-positive subjects tested for recency should be less than HIV-positive subjects among total sample size"),
need(input$N_testR>=input$N_R,"The number of recent HIV cases should be less than HIV-positive subjects tested for recency"),
need(input$N_R>=0,"Please enter a valid number for recent HIV cases"),
need(input$RSE_FRR >= 0, 'Please provide a valid RSE for FRR'),
need(input$RSE_FRR <= 100, 'Please provide a valid RSE for FRR'),
need(!(input$RSE_FRR == "" ), 'Please provide a value for RSE_FRR'),
need(input$RSE_MDRI >= 0, 'Please provide a valid RSE for MDRI'),
need(input$RSE_MDRI <= 100, 'Please provide a valid RSE for MDRI'),
need(!(input$RSE_MDRI == "" ), 'Please provide a value for RSE_MDRI'),
need(input$MDRI >= 0, 'Please provide a valid value for MDRI'),
need(input$FRR >= 0, 'Please provide a valid value for FRR'),
need(input$FRR <= 100, 'Please provide a valid value for FRR'),
need(input$BigT, 'Please provide a value for the cut-off time'),
need(input$BigT > 120, 'Please provide a valid value for the cut-off time (>120)')
)
temp <- incidence_calc(N = input$N, N_H = input$N_H,
N_testR = input$N_testR, N_R = input$N_R,
DE_H = input$DE_H, DE_R = input$DE_R,
MDRI = input$MDRI, RSE_MDRI = input$RSE_MDRI/100,
FRR = input$FRR/100, RSE_FRR = input$RSE_FRR/100,
BigT = input$BigT)
return(temp)
})
data_risk <- reactive({ # for risk of infection calculiation
validate(
need(input$N>0,"Please enter a valid total population sample size"),
need(input$N>=input$N_H,"HIV-positive subjects should be less than total sample size"),
need(input$N_H>=input$N_testR,"HIV-positive subjects tested for recency should be less than HIV-positive subjects among total sample size"),
need(input$N_testR>=input$N_R,"The number of recent HIV cases should be less than HIV-positive subjects tested for recency"),
need(input$RSE_FRR >= 0, 'Please provide a valid RSE for FRR'),
need(input$RSE_FRR <= 100, 'Please provide a valid RSE for FRR'),
need(!(input$RSE_FRR == "" ), 'Please provide a value for RSE_FRR'),
need(input$RSE_MDRI >= 0, 'Please provide a valid RSE for MDRI'),
need(input$RSE_MDRI <= 100, 'Please provide a valid RSE for MDRI'),
need(!(input$RSE_MDRI == "" ), 'Please provide a value for RSE_MDRI'),
need(input$MDRI >= 0, 'Please provide a valid value for MDRI'),
need(input$FRR >= 0, 'Please provide a valid value for FRR'),
need(input$FRR <= 100, 'Please provide a valid value for FRR'),
need(input$BigT, 'Please provide a value for the cut-off time'),
need(input$BigT > 120, 'Please provide a valid value for the cut-off time (>120)')
)
temp <- risk_of_infection_calc(N = input$N, N_H = input$N_H,
N_testR = input$N_testR, N_R = input$N_R,
DE_H = input$DE_H, DE_R = input$DE_R,
MDRI = input$MDRI, RSE_MDRI = input$RSE_MDRI/100,
FRR = input$FRR/100, RSE_FRR = input$RSE_FRR/100,
BigT = input$BigT)
return(temp)
})
data_incidence_count <- reactive({ # for the general wrapper from above
validate(
need(input$N>0,"Please enter a valid total population sample size"),
need(input$N>=input$N_H,"HIV-positive subjects should be less than total sample size"),
need(input$N_H>=input$N_testR,"HIV-positive subjects tested for recency should be less than HIV-positive subjects among total sample size"),
need(input$N_testR>=input$N_R,"The number of recent HIV cases should be less than HIV-positive subjects tested for recency"),
need(input$RSE_FRR >= 0, 'Please provide a valid RSE for FRR'),
need(input$RSE_FRR <= 100, 'Please provide a valid RSE for FRR'),
need(!(input$RSE_FRR == "" ), 'Please provide a value for RSE_FRR'),
need(input$RSE_MDRI >= 0, 'Please provide a valid RSE for MDRI'),
need(input$RSE_MDRI <= 100, 'Please provide a valid RSE for MDRI'),
need(!(input$RSE_MDRI == "" ), 'Please provide a value for RSE_MDRI'),
need(input$MDRI >= 0, 'Please provide a valid value for MDRI'),
need(input$FRR >= 0, 'Please provide a valid value for FRR'),
need(input$FRR <= 100, 'Please provide a valid value for FRR'),
need(input$BigT, 'Please provide a value for the cut-off time'),
need(input$BigT > 120, 'Please provide a valid value for the cut-off time (>120)')
)
temp <- prev_inc_calc_counts(N = input$N, N_H = input$N_H,
N_testR = input$N_testR, N_R = input$N_R,
DE_H = input$DE_H, DE_R = input$DE_R,
MDRI = input$MDRI, RSE_MDRI = input$RSE_MDRI/100,
FRR = input$FRR/100, RSE_FRR = input$RSE_FRR/100,
BigT = input$BigT)
return(temp)
})
temp<-data_incidence_count()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/inctools/shiny-inctools/Incidence_difference_calculator')
runApp('~/Desktop/inctools/shiny-inctools/sample_size_for_power')
